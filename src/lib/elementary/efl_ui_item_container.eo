class @beta Efl.Ui.Item_Container extends Efl.Ui.Layout_Base implements
                   Efl.Ui.Scrollable_Interactive,
                   Efl.Ui.Scrollbar,
                   Efl.Pack_Linear, Efl.Pack_Layout,
                   Efl.Ui.Layout_Orientable,
                   Efl.Ui.Selectable,
                   Efl.Ui.Multi_Selectable
{
   [[This widget can be used to define a set of items that needs to be displayed.

     The policy for selecting items can be controlled via $select_mode. The selected items can be received by $selected_items_get.
     The concrete placement of the items depends on the $position_manager object.
   ]]
   event_prefix:efl_ui;
   methods {
      item_scroll {
         [[Bring the passed item into the viewport.]]
         params {
            @in item: Efl.Ui.Item; [[The target to move in.]]
            @in animation: bool; [[If you want to have an animation or not.]]
         }
      }
      item_scroll_align {
         [[Bring the passed item into the viewport, place the item accordingly to align in the viewport]]
         params {
            @in item: Efl.Ui.Item; [[The target to move in.]]
            @in align: double; [[0.0 to have this item at the upper or left side of the viewport, 1.0 to have this item at the lower or right side of the viewport]]
            @in animation: bool; [[If you want to have an animation or not.]]
         }
      }
      @property last_selected_item {
         [[The item that was selected the most recent.
           No other item has been selected while this one was selected.
         ]]
         get {}
         values {
            item: Efl.Ui.Item; [[The latest selected item.]]
         }
      }
      selected_items_get {
         [[Get the selected items iterator. The iterator sequence will be decided by selection.]]
         return: iterator<Efl.Ui.Item> @owned @no_unused; [[Iterator covered by selected items list.
                                                                 user have to free the iterator after used.]]
      }
      @property position_manager {
         [[The position manager that handes the placement of items of this object.]]
         values {
            position_manager : Efl.Ui.Item_Position_Manager @owned; [[The objects ownership is passed to the item container.]]
         }
      }
   }
   implements {
      Efl.Object.constructor;
      Efl.Object.finalize;
      Efl.Object.destructor;
      Efl.Object.invalidate;
      Efl.Container.content_iterate;
      Efl.Container.content_count;
      Efl.Ui.Layout_Orientable.orientation { get; set; }
      Efl.Ui.Widget.theme_apply;
      Efl.Pack.pack_clear;
      Efl.Pack.unpack_all;
      Efl.Pack.unpack;
      Efl.Pack.pack;
      Efl.Pack_Linear.pack_end;
      Efl.Pack_Linear.pack_begin;
      Efl.Pack_Linear.pack_before;
      Efl.Pack_Linear.pack_after;
      Efl.Pack_Linear.pack_at;
      Efl.Pack_Linear.pack_unpack_at;
      Efl.Pack_Linear.pack_index_get;
      Efl.Pack_Linear.pack_content_get;
      Efl.Ui.Scrollable_Interactive.match_content { set; }
      Efl.Ui.Multi_Selectable.select_mode {get; set;}
   }
   events {
      item,pressed : Efl.Ui.Item; [[A item was pressed]]
      item,unpressed : Efl.Ui.Item; [[A item was unpressed]]
      item,longpressed : Efl.Ui.Item; [[A item was longpressed]]
      item,clicked : Efl.Ui.Item; [[A item was clicked with the primary mouse button]]
      item,clicked,any : Efl.Ui.Item; [[A item was clicked]]
   }
   composite {
      Efl.Ui.Scrollable_Interactive;
      Efl.Ui.Scrollbar;
   }
}

